#!/usr/bin/env bash

# Health: A command-line RHEL system check tool written in bash 3.2+.
# https://github.com/zpiatt/health
#
# Copyright (C) 2024 Zac Piatt
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

readonly version="Health version: 1.9.4 - August 12, 2024"

usage() {
    printf "Usage: health [OPTION]... [DIRECTORY]...\n"
    printf "Display general system statisics and check for common errors.\n\n"
    printf "  -e,   parse dmesg for alerts, errors, etc. (may require sudo)\n"
    printf "  -f,   report 10 largest files in specified directory tree\n"
    printf "  -h,   display this help and exit\n"
    printf "  -k,   display kernel information; check for updates\n"
    printf "  -o,   show users with open files (may require sudo)\n"
    printf "  -r,   display health on remote host\n"
    printf "  -s,   search for common file permission vulnerabilities\n"
    printf "  -u,   report 10 largest directories by inode usage\n"
    printf "  -v,   display version number and exit\n"
    printf "  -w,   show passwd info for specified user\n"
    printf "  -z,   display zombie process count, if any\n\n"
    printf "Full documentation <https://github.com/zpiatt/health>\n"
}

health() {
    local product_name sys_vendor

    printf "%bHostname:%b %s\n" "$blue" "$reset" "$(< /etc/hostname)"
    product_name=/sys/devices/virtual/dmi/id/product_name
    sys_vendor=/sys/devices/virtual/dmi/id/sys_vendor
    [[ -f "$product_name" && -f "$sys_vendor" ]] && {
        printf "%bHost Info:%b %s, %s\n" "$blue" "$reset" "$(<"$product_name")" "$(<"$sys_vendor")"; }
    [[ -f /etc/redhat-release ]] && {
        printf "%bVersion:%b %s (%s)\n" "$blue" "$reset" "$(< /etc/redhat-release)" \
            "$(awk '{print $3}' /proc/version)"; }
    printf "%bUptime:%b %s\n" "$blue" "$reset" "$(uptime)"
    get_network_info
    whotf
    get_mem_info
    printf "%bTop 5 Processes by Memory:%b\n%s\n" "$blue" "$reset" \
        "$(ps -eo %mem,comm,pid --sort=-%mem | head -n 6)"
    printf "%bTop 5 Processes by CPU:%b\n%s\n" "$blue" "$reset" \
        "$(ps -eo pcpu,comm,pid --sort=-pcpu | head -n 6)"
    check_mounts
}

check_df() {
    local line status

    while read -r line; do
        case "$line" in
            *100%*) printf "%b%s%b\n" "$red" "$line" "$reset"; status=1 ;;
            *9?%*) printf "%b%s%b\n" "$yellow" "$line" "$reset"; status=1 ;;
        esac
    done < <(df "$1")

    return "${status:-0}"
}

dmesg_parse() {
    local level emerg crit alert err warn

    if dmesg -V &> /dev/null; then
        for level in emerg crit alert err warn; do
            readarray -t "$level" < <(dmesg -l "$level")
        done
    else
        printf "health: dmesg version insufficient\n" >&2
        printf "Try 'health -h' for more information.\n" >&2
    fi

    [[ -n "$emerg" ]] && printf "%bemergency messages%b: %d\n" "$red" "$reset" "${#emerg[@]}"
    [[ -n "$crit" ]] && printf "%bcritical messages%b: %d\n" "$red" "$reset" "${#crit[@]}"
    [[ -n "$alert" ]] && printf "%balert messages%b: %d\n" "$yellow" "$reset" "${#alert[@]}"
    [[ -n "$err" ]] && printf "%berror messages%b: %d\n" "$yellow" "$reset" "${#err[@]}"
    [[ -n "$warn" ]] && printf "%bwarning messages%b: %d\n" "$yellow" "$reset" "${#warn[@]}"
}

check_kernel() {
    local current_kernel check_yum available_kernel latest_kernel

    current_kernel=$(awk '{print $3}' /proc/version)
    check_yum=$(yum list updates kernel 2>&1)
    available_kernel=$(echo "$check_yum" | awk '/kernel/{print $2}')

    if [[ -n "$available_kernel" ]]; then
        printf "%bKernel version:%b (%bpending kernel updates%b)\n" "$blue" "$reset" "$yellow" "$reset"
        printf "  Available (yum update): \t%s\n" "$available_kernel"
    elif [[ "$check_yum" =~ "No matching Packages to list" ]]; then
        latest_kernel=$(rpm -q --last kernel | sed -n '1s/kernel-//;1s/ .*$//p')
        if [[ "$latest_kernel" == "$current_kernel" ]]; then
            printf "%bKernel version:%b (%bup-to-date%b)\n" "$blue" "$reset" "$green" "$reset"
        else
            printf "%bKernel version:%b (%bpending kernel updates%b)\n" "$blue" "$reset" "$yellow" "$reset"
            printf "  Latest installed kernel: \t%s\n" "$latest_kernel"
        fi
    else
        printf "%s\n" "$check_yum" >&2; return 1
    fi

    printf "  Current running kernel: \t%s\n" "$current_kernel"
}

check_mounts() {
    local line mounts nfs_servers mount error nfs

    printf "%bMounts & File Sytems:%b\n" "$blue" "$reset"
    if [[ -f /etc/fstab ]]; then
        while read -ra line || [[ -n "${line[*]}" ]]; do
            [[ ! "${line[0]}" =~ ^# && "${line[1]}" =~ ^/ ]] && mounts+=("${line[1]}")
        done < /etc/fstab
    fi

    if [[ -n "${mounts[*]}" ]]; then
        for mount in "${mounts[@]}"; do
            if ! findmnt "$mount" &> /dev/null; then
                printf "%b%s is declared in fstab but not mounted\n%b" "$yellow" "$mount" "$reset"
                error=true
            fi
        done
    fi

    if timeout 2 df &> /dev/null; then
        check_df "-Ti" || error=true
        check_df "-Th" || error=true
    else
        printf "%bHung mount detected%b\n" "$yellow" "$reset" >&2
        error=true
    fi

    [[ -z "$error" ]] && printf "No issues detected\n"
}

get_network_info() {
    local line gateway interface dns_servers dns ntp_servers ntp nfs

    declare -A interfaces

    while read -ra line; do
        if [[ "${line[0]}" == default ]]; then
            gateway="${line[2]}"
        elif [[ "${line[6]}" == link ]]; then
            interfaces["${line[2]}"]="${line[8]}"
        fi
    done < <(ip route 2> /dev/null)

    if [[ -n "${interfaces[*]}" ]]; then
        printf "%bInterface(s):%b\n" "$blue" "$reset"
        for interface in "${!interfaces[@]}"; do
            printf "  %s - %s\n" "$interface" "${interfaces[$interface]}"
        done
    fi

    if [[ -n "$gateway" ]]; then
        printf "%bDefault gateway:%b\n" "$blue" "$reset"
        if ping -W1 -c1 "$gateway" &> /dev/null; then
            printf "  %s (%breachable%b)\n" "$gateway" "$green" "$reset"
        else
            printf "  %s (%bunreachable%b)\n" "$gateway" "$yellow" "$reset"
        fi
    fi

    if grep "^DNS=" /etc/systemd/resolved.conf &> /dev/null; then
        while read -ra line || [[ -n "${line[*]}" ]]; do
            [[ "${line[0]}" =~ ^DNS= ]] && dns_servers=("${line[@]#DNS=}")
        done < /etc/systemd/resolved.conf
    elif [[ -f /etc/resolv.conf ]]; then
        while read -ra line || [[ -n "${line[*]}" ]]; do
            [[ "${line[0]}" =~ ^nameserver ]] && dns_servers+=("${line[1]}")
        done < /etc/resolv.conf
    fi

    if [[ -n "${dns_servers[*]}" ]]; then
        printf "%bDNS nameserver(s):%b\n" "$blue" "$reset"
        for dns in "${dns_servers[@]}"; do
            if ping -W1 -c1 "$dns" &> /dev/null; then
                printf "  %s (%breachable%b)\n" "$dns" "$green" "$reset"
            else
                printf "  %s (%bpotential DNS error%b)\n" "$dns" "$yellow" "$reset"
            fi
        done
    fi

    while read -ra line; do
        case "${line[0]}" in
            ^\*) ntp_servers+=("${line[1]} (${green}current best${reset})") ;;
            ^\+) ntp_servers+=("${line[1]} (${green}combined${reset})") ;;
            ^-) ntp_servers+=("${line[1]} (${green}not combined${reset})") ;;
            ^x) ntp_servers+=("${line[1]} (${yellow}may be in error${reset})") ;;
            ^~) ntp_servers+=("${line[1]} (${red}too variable${reset})") ;;
            ^\?) ntp_servers+=("${line[1]} (${red}unusable${reset})") ;;
            *) ;;
        esac
    done < <(chronyc -n sources 2> /dev/null)

    if [[ -n "${ntp_servers[*]}" ]]; then
        printf "%bNTP server(s):%b\n" "$blue" "$reset"
        for ntp in "${ntp_servers[@]}"; do
            printf "  %b\n" "$ntp"
        done
    fi

    declare -A nfs_servers

    if [[ -f /etc/fstab ]]; then
        while read -ra line || [[ -n "${line[*]}" ]]; do
            if [[ ! "${line[0]}" =~ ^# && "${line[2]}" == nfs ]]; then
                nfs_servers["${line[0]%:*}"]=1
            fi
        done < /etc/fstab
    fi

    if [[ -n "${nfs_servers[*]}" ]]; then
        printf "%bNFS Server(s):%b\n" "$blue" "$reset"
        for nfs in "${!nfs_servers[@]}"; do
            if timeout 1 showmount "$nfs" &> /dev/null; then
                printf "  %s (%breachable%b)\n" "$nfs" "$green" "$reset"
            else
                printf "  %s (%bpotential NFS error%b)\n" "$nfs" "$yellow" "$reset"
            fi
        done
    fi
}

users_with_open_files() {
    local all_users id

    readarray -t all_users < <(lsof -Fnu | awk '/^u/&&!x[$0]++')

    printf "%-24.24s%-12.12s%-12.12s%-32.32s\n" "NAME" "UID" "GID" "FULL NAME"
    for id in "${all_users[@]}"; do
        while IFS=':' read -ra line; do
            printf "%-24.24s%-12.12s%-12.12s%-32.32s\n" "${line[0]}" "${line[2]}" "${line[3]}" "${line[4]}"
        done < <(getent passwd "${id:1}")
    done
}

file_vulnerability() {
    local world_write setbits

    world_write="$(find "$dir" ! -type l -perm -002)"
    setbits="$(find "$dir" -perm -4000 -o -perm -2000)"

    [[ -n "$world_write" ]] && printf "%bWorld writable files:%b\n%s\n" "$blue" "$reset" "$world_write"
    [[ -n "$setbits" ]] && printf "%bFiles with setgids/setuids:%b\n%s\n" "$blue" "$reset" "$setbits"
}

whotf() {
    local user stats full_name

    printf "%bUsers Currently Logged in:%b\n" "$blue" "$reset"
    while read -r user stats; do
        full_name=$(getent passwd "$user" | awk -F: '{print $5}')
        printf "%-32.32s %s (%s)\n" "${full_name:-$user}" "$stats" "$user"
    done < <(who)
}

get_mem_info() {
    local mem_total mem_free buffers cached swap_total swap_free mem_percent swap_percent line

    printf "%bMemory Usage:%b\n" "$blue" "$reset"
    if [[ -f /proc/meminfo ]]; then
        while read -ra line || [[ -n "${line[*]}" ]]; do
            case "${line[0]}" in
                MemTotal:) mem_total="${line[1]}" ;;
                MemFree:) mem_free="${line[1]}" ;;
                Buffers:) buffers="${line[1]}" ;;
                Cached:) cached="${line[1]}" ;;
                SwapTotal:) swap_total="${line[1]}" ;;
                SwapFree:) swap_free="${line[1]}" ;;
            esac
        done < /proc/meminfo

        (( mem_total > 0 )) && \
            mem_percent=$(( ((mem_total - mem_free - buffers - cached) * 100) / mem_total ))
        (( swap_total > 0 )) && \
            swap_percent=$(( ((swap_total - swap_free) * 100) / swap_total ))

        printf "%20s %10s %11s %11s %11s %11s %11s\n" \
            "total" "used" "free" "shared"  "buff/cache" "available" "used%"

        while read -ra line; do
            case "${line[0]}" in
                Mem:)
                    if (( mem_percent >= 90 )); then
                        printf "%s %15s %10s %11s %11s %11s %11s %b%11s%b\n" \
                            "${line[@]}" "$red" "${mem_percent:-0}%" "$reset"
                    else
                        printf "%s %15s %10s %11s %11s %11s %11s %11s\n" \
                            "${line[@]}" "${mem_percent:-0}%"
                    fi
                ;;

                Swap:)
                    if (( swap_percent >= 90 )); then
                        printf "%s %14s %10s %11s %b%47s%b\n" \
                            "${line[@]}" "$red" "${swap_percent:-0}%" "$reset"
                    else
                        printf "%s %14s %10s %11s %47s\n" \
                            "${line[@]}" "${swap_percent:-0}%"
                    fi
                ;;
            esac
        done < <(free -h)
    else
        free -h
    fi
}

get_args() {
    local option

    while getopts ':efhkor:suvw:z' option; do
        case "$option" in
            e|f|k|o|s|u|z) args_array+=("$option") ;;
            h) usage; exit 0 ;;
            r) ssh -qt "$OPTARG" "bash -s" < "$0" ;;
            v) printf "%s\n" "$version"; exit 0 ;;
            w) args_array+=("$option"); user="$OPTARG" ;;
            ?)
                printf "health: invalid option -- '%s'\n" "$OPTARG" >&2
                printf "Try 'health -h' for more information.\n" >&2; exit 2
            ;;
        esac
    done
    shift "$(( OPTIND -1 ))"

    if [[ -z "${1:-}" ]]; then
       dir="$(pwd)"
    elif [[ ! -d "$1" ]]; then
        printf "'%s': not a valid path.\n" "$1" >&2; exit 2
    else
        if [[ -n "${args_array[*]}" ]]; then
            dir="$1"
        else
            printf "health: invalid option -- '%s'\n" "$*" >&2
            printf "Try 'health -h' for more information.\n" >&2; exit 2
        fi
    fi
}

main() {
    reset='\033[0m'
    red='\033[0;31m'
    green='\033[0;32m'
    yellow='\033[0;33m'
    blue='\033[0;34m'

    if [[ "$#" -eq 0 ]]; then
        health; exit 0
    else
        get_args "$@"
    fi

    for arg in "${args_array[@]}"; do
        [[ "$arg" == "e" ]] && dmesg_parse
        [[ "$arg" == "f" ]] && find "$dir" -xdev -type f -print0 | xargs -0 du -Sh | sort -rh | head
        [[ "$arg" == "k" ]] && check_kernel
        [[ "$arg" == "o" ]] && users_with_open_files
        [[ "$arg" == "s" ]] && file_vulnerability
        [[ "$arg" == "u" ]] && find "$dir" -xdev -printf '%h\n' | sort | uniq -c | sort -rn | head
        [[ "$arg" == "w" ]] && getent passwd "$user"
        [[ "$arg" == "z" ]] && ps axo stat | awk 'BEGIN{i=0}/Z/{i++;}END{print i}'
    done

    return 0
}

main "$@"
