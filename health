#!/usr/bin/env bash

# Health: A command-line RHEL system check tool written in bash 3.2+.
# https://github.com/zpiatt/health
#
# Copyright (C) 2023 Zac Piatt
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

readonly version="Health version: 1.6.8 - May 16, 2024"

usage() {
    printf "Usage: health [OPTION]... [DIRECTORY]...\n"
    printf "Display general system statisics and check for common errors.\n\n"
    printf "  -d,   display colorized file system disk space usage\n"
    printf "  -e,   parse dmesg for alerts, errors, etc. (may require sudo)\n"
    printf "  -f,   report 10 largest files in specified directory tree\n"
    printf "  -h,   display this help and exit\n"
    printf "  -i,   display colorized file systems inodes usage\n"
    printf "  -k,   display kernel information; check for updates\n"
    printf "  -m,   check mounts for common errors\n"
    printf "  -n,   display basic network details\n"
    printf "  -r,   display health on remote host\n"
    printf "  -s,   search for common file permission vulnerabilities\n"
    printf "  -u,   report 10 largest directories by inode usage\n"
    printf "  -v,   display version number and exit\n"
    printf "  -z,   display zombie process count, if any\n\n"
    printf "Full documentation <https://github.com/zpiatt/health>\n"
}

health() {
    printf "%bHostname:%b %s\n" "$blue" "$reset" "$(hostname)"
    get_network_info
    if [[ -f /sys/devices/virtual/dmi/id/product_name && -f /sys/devices/virtual/dmi/id/sys_vendor ]]; then
        printf "%bServer Info:%b %s, %s\n" "$blue" "$reset" \
        "$(< /sys/devices/virtual/dmi/id/product_name)" "$(< /sys/devices/virtual/dmi/id/sys_vendor)"
    fi
    [[ -f /etc/redhat-release ]] && printf "%bLinux Version:%b %s\n" "$blue" "$reset" "$(< /etc/redhat-release)"
    printf "%bKernel Version:%b %s\n" "$blue" "$reset" "$(awk '{print $3}' /proc/version)"
    printf "%bUptime:%b %s\n" "$blue" "$reset" "$(uptime)"
    printf "%bUsers Currently Logged in:%b\n%s\n" "$blue" "$reset" "$(who -u)"
    printf "%bMemory Usage:%b\n%s\n" "$blue" "$reset" "$(free -h)"
    printf "%bTop 5 Processes by Memory:%b\n%s\n" "$blue" "$reset" \
        "$(ps -eo %mem,comm,pid --sort=-%mem | head -n 6)"
    printf "%bTop 5 Processes by CPU:%b\n%s\n" "$blue" "$reset" \
        "$(ps -eo pcpu,comm,pid --sort=-pcpu | head -n 6)"
    check_mounts
}

check_df() {
    local line
    timeout 2 df &> /dev/null || { printf "%bHung mount detected.%b\n" "$yellow" "$reset" >&2; return 1; }
    printf "%bDisk Usage:%b\n" "$blue" "$reset"
    while read -r line; do
        case "$line" in
            *100%*) printf "%b%s%b\n" "$red" "$line" "$reset" ;;
            *9?%*) printf "%b%s%b\n" "$yellow" "$line" "$reset" ;;
            *) printf "%s\n" "$line" ;;
        esac
    done < <(df "$1")
}

dmesg_parse() {
    local level emerg crit alert err warn
    dmesg -V &> /dev/null || {
        printf "health: dmesg version insufficient\n" >&2
        printf "Try 'health -h' for more information.\n" >&2; return 1; }

    for level in emerg crit alert err warn; do
        readarray -t "$level" < <(dmesg -l "$level")
    done

    [[ -n "$emerg" ]] && printf "%bemergency messages%b: %d\n" "$red" "$reset" "${#emerg[@]}"
    [[ -n "$crit" ]] && printf "%bcritical messages%b: %d\n" "$red" "$reset" "${#crit[@]}"
    [[ -n "$alert" ]] && printf "%balert messages%b: %d\n" "$yellow" "$reset" "${#alert[@]}"
    [[ -n "$err" ]] && printf "%berror messages%b: %d\n" "$yellow" "$reset" "${#err[@]}"
    [[ -n "$warn" ]] && printf "%bwarning messages%b: %d\n" "$yellow" "$reset" "${#warn[@]}"
}

large_files() {
    printf "%b10 Largest Files in:%b %s\n" "$blue" "$reset" "$dir"
    find "$dir" -xdev -type f -print0 | xargs -0 du -Sh | sort -rn | head
}

check_kernel() {
    local current_kernel latest_kernel check_yum available_kernel
    current_kernel=$(awk '{print $3}' /proc/version)
    latest_kernel=$(rpm -q --last kernel | sed -n '1s/kernel-//;1s/ .*$//p')
    check_yum=$(yum list updates kernel 2>&1)
    available_kernel=$(echo "$check_yum" | awk '/kernel/{print $2}')

    if [[ -n "$available_kernel" ]]; then
        printf "%bKernel version:%b (%bpending kernel updates%b)\n" "$blue" "$reset" "$yellow" "$reset"
        printf "  Available (yum update): \t%s\n" "$available_kernel"
    elif [[ "$check_yum" =~ "No matching Packages to list" ]]; then
        if [[ "$latest_kernel" == "$current_kernel" ]]; then
            printf "%bKernel version:%b (%bup-to-date%b)\n" "$blue" "$reset" "$green" "$reset"
        else
            printf "%bKernel version:%b (%bpending kernel updates%b)\n" "$blue" "$reset" "$yellow" "$reset"
            printf "  Latest installed kernel: \t%s\n" "$latest_kernel"
        fi
    else
        printf "%s\n" "$check_yum" >&2; return 1
    fi
    printf "  Current running kernel: \t%s\n" "$current_kernel"
}

check_mounts() {
    local mount error
    printf "%bMounts:%b\n" "$blue" "$reset"
    timeout 2 df &> /dev/null || { printf "%bHung mount detected.%b\n" "$yellow" "$reset" >&2; return 1; }
    while read -r mount; do
        findmnt "$mount" &> /dev/null || {
            printf "%b%s is declared in fstab but not mounted\n%b" "$yellow" "$mount" "$reset"
            error=true; }
    done < <(awk '!/^#/ && $2~/^[/]/ {print $2}' /etc/fstab)
    [[ -z "$error" ]] && printf "No issues detected\n"
    printf "%bFull File Systems:%b\n%s\n" "$blue" "$reset" "$(df -h | grep "100%" || printf "None\n")"
    printf "%bFull Inodes:%b\n%s\n" "$blue" "$reset" "$(df -i | grep "100%" || printf "None\n")"
}

get_network_info() {
    local interface ip gateway dns nfs_server
    printf "%bNetwork Info:%b\n" "$blue" "$reset"
    printf "Interface(s):\n"
    while read -r interface ip; do
        printf "  %s - %s\n" "$interface" "$ip"
    done < <(ip route 2> /dev/null | awk '/src/{print $3, $9}')
    printf "Default gateway(s):\n"
    while read -r gateway; do
        if ping -W1 -c1 "$gateway" &> /dev/null; then
            printf "  %s (%breachable%b)\n" "$gateway" "$green" "$reset"
        else
            printf "  %s (%bunreachable%b)\n" "$gateway" "$yellow" "$reset"
        fi
    done < <(ip route 2> /dev/null | awk '/default/{print $3}')
    printf "DNS nameserver(s):\n"
    while read -r dns; do
        if ping -W1 -c1 "$dns" &> /dev/null; then
            printf "  %s (%breachable%b)\n" "$dns" "$green" "$reset"
        else
            printf "  %s (%bpotential DNS error%b)\n" "$dns" "$yellow" "$reset"
        fi
    done < <(awk '/^nameserver/{print $2}' /etc/resolv.conf 2> /dev/null)
    printf "NFS server(s):\n"
    while read -r nfs_server; do
        if timeout 1 showmount -e "$nfs_server" &> /dev/null; then
            printf "  %s (%breachable%b)\n" "$nfs_server" "$green" "$reset"
        else
            printf "  %s (%bpotential NFS error%b)\n" "$nfs_server" "$yellow" "$reset"
        fi
    done < <(awk -F: '!/^#/&&/nfs/{print $1}' /etc/fstab 2> /dev/null)
}

file_vulnerability() {
    local world_write setbits
    world_write="$(find "$dir" ! -type l -perm -002)"
    [[ -n "$world_write" ]] && printf "%bWorld writable files:%b\n%s\n" "$blue" "$reset" "$world_write"
    setbits="$(find "$dir" -perm -4000 -o -perm -2000)"
    [[ -n "$setbits" ]] && printf "%bFiles with setgids/setuids:%b\n%s\n" "$blue" "$reset" "$setbits"
}

zombies() {
    printf "%bZombie Process Count: %b" "$blue" "$reset"
    ps axo stat | awk 'BEGIN{i=0}/Z/{i++;}END{print i}'
}

get_args() {
    local option
    while getopts ':defhikmnr:suvz' option; do
        case "$option" in
            d|e|f|i|k|m|n|s|u|z) args_array+=("$option") ;;
            h) usage; exit 0 ;;
            r) ssh -qt "$OPTARG" "bash -s" < "$0" ;;
            v) printf "%s\n" "$version"; exit 0 ;;
            ?)
                printf "health: invalid option -- '%s'\n" "$OPTARG" >&2
                printf "Try 'health -h' for more information.\n" >&2; exit 2
            ;;
        esac
    done
    shift "$(( OPTIND -1 ))"

    if [[ -z "${1:-}" ]]; then
       dir="$(pwd)"
    elif [[ ! -d "$1" ]]; then
        printf "'%s': not a valid path.\n" "$1" >&2; exit 2
    else
       dir="$1"
    fi
}

main() {
    green='\033[38;5;46m'
    yellow='\033[38;5;226m'
    blue='\033[38;5;33m'
    red='\033[38;5;160m'
    reset='\033[0m'

    if [[ "$#" -eq 0 ]]; then
        health; exit 0
    else
        get_args "$@"
    fi

    for arg in "${args_array[@]}"; do
        [[ "$arg" == "d" ]] && check_df "-Th"
        [[ "$arg" == "e" ]] && dmesg_parse
        [[ "$arg" == "f" ]] && large_files
        [[ "$arg" == "i" ]] && check_df "-Ti"
        [[ "$arg" == "k" ]] && check_kernel
        [[ "$arg" == "m" ]] && check_mounts
        [[ "$arg" == "n" ]] && get_network_info
        [[ "$arg" == "s" ]] && file_vulnerability
        [[ "$arg" == "u" ]] && find "$dir" -xdev -printf '%h\n' | sort | uniq -c | sort -rn | head
        [[ "$arg" == "z" ]] && zombies
    done

    return 0
}

main "$@"
